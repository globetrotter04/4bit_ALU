`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03.10.2024 20:09:56
// Design Name: 
// Module Name: ALU_4bit
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module ALU_4bit (
    input [3:0] operand1,
    input [3:0] operand2,
    input [3:0] OP,
    output reg [3:0] result,
    output reg carry_out // Carry output for add operation
);
    // Wires for the outputs of each operation
    wire [3:0] add_res, sub_res, and_res, xor_res, or_res, two_comp_res, inv_res, shl_res, shr_res, rol_res, ror_res;
    wire add_carry_out;  // Wire to store the carry-out from the adder

    // Instantiate each operation module
    Adder add_module (.a(operand1), .b(operand2), .sum(add_res), .carry_out(add_carry_out));
    Subtractor sub_module (.a(operand1), .b(operand2), .diff(sub_res));
    BitwiseAND and_module (.a(operand1), .b(operand2), .out(and_res));
    BitwiseXOR xor_module (.a(operand1), .b(operand2), .out(xor_res));
    BitwiseOR or_module (.a(operand1), .b(operand2), .out(or_res));
    TwoComplement two_comp_module (.a(operand1), .out(two_comp_res));
    BitwiseInvert inv_module (.a(operand1), .out(inv_res));
    ShiftLeft shl_module (.a(operand1), .shamt(operand2), .out(shl_res));
    ShiftRight shr_module (.a(operand1), .shamt(operand2), .out(shr_res));
    RotateLeft rol_module (.a(operand1), .shamt(operand2), .out(rol_res));
    RotateRight ror_module (.a(operand1), .shamt(operand2), .out(ror_res));

    always @(*) begin
        carry_out = 1'b0;  // Default carry_out is 0
        case (OP)
            4'b0000: begin
                result = 4'b0000;  // NOP (No Operation)
            end
            4'b0001: begin
                result = add_res;   // Add operation
                carry_out = add_carry_out;  // Assign carry out from adder
            end
            4'b0010: begin
                result = sub_res;  // Subtract operation
            end
            4'b0011: begin
                result = and_res;  // Bitwise AND
            end
            4'b0100: begin
                result = xor_res;  // Bitwise XOR
            end
            4'b0101: begin
                result = or_res;   // Bitwise OR
            end
            4'b0110: begin
                result = two_comp_res;  // 2's complement of operand1
            end
            4'b0111: begin
                result = inv_res;  // Bitwise invert of operand1
            end
            4'b1000: begin
                result = shl_res;  // Shift operand1 left by operand2 bits
            end
            4'b1001: begin
                result = shr_res;  // Shift operand1 right by operand2 bits
            end
            4'b1010: begin
                result = rol_res;  // Rotate operand1 left by operand2 bits
            end
            4'b1011: begin
                result = ror_res;  // Rotate operand1 right by operand2 bits
            end
            default: begin
                result = 4'b0000;  // Default case for unrecognized OP
            end
        endcase
    end
endmodule
